package com.daomingedu.onecp.mvp.ui.activity

import android.content.Intent
import android.os.Bundle
import android.view.View
import androidx.fragment.app.Fragment
import com.daomingedu.art.mvp.model.entity.VersionBean
import com.daomingedu.art.mvp.ui.fragment.HomeFragment
import com.daomingedu.art.mvp.ui.fragment.MineFragment
import com.daomingedu.art.mvp.ui.fragment.StudyCircleFragment
import com.daomingedu.onecp.BuildConfig
import com.daomingedu.onecp.R
import com.daomingedu.onecp.app.visible
import com.daomingedu.onecp.di.component.DaggerMainComponent
import com.daomingedu.onecp.di.module.MainModule
import com.daomingedu.onecp.mvp.contract.MainContract
import com.daomingedu.onecp.mvp.presenter.MainPresenter
import com.daomingedu.onecp.mvp.ui.fragment.TestFragment
import com.daomingedu.onecp.util.SharedPreferencesUtil
import com.jess.arms.base.BaseActivity
import com.jess.arms.di.component.AppComponent
import com.jess.arms.integration.AppManager
import com.jess.arms.utils.ArmsUtils
import com.jess.arms.utils.Preconditions
import constant.UiType
import kotlinx.android.synthetic.main.activity_main.*
import model.UiConfig
import model.UpdateConfig
import update.UpdateAppUtils
import javax.inject.Inject

class MainAct : BaseActivity<MainPresenter>(), MainContract.View, View.OnClickListener {

    @Inject
    lateinit var mHomeFragment: HomeFragment

    @Inject
    lateinit var mStudyCircleFragment: StudyCircleFragment

    @Inject
    lateinit var mMineFragment: MineFragment

    @Inject
    lateinit var mTestFragment: TestFragment

    private var mCurrentFragment: Fragment? = null

    override fun setupActivityComponent(appComponent: AppComponent) {
        DaggerMainComponent.builder().appComponent(appComponent).mainModule(MainModule(this))
            .build().inject(this)
    }

    override fun initView(savedInstanceState: Bundle?): Int {
        return R.layout.activity_main //如果你不需要框架帮你设置 setContentView(id) 需要自行设置,请返回 0
    }

    override fun initData(savedInstanceState: Bundle?) {
        AppManager.getAppManager().killAll(MainAct::class.java)
        setupPages()
        mPresenter?.getVersionInfo()

    }



    override fun showLoading() {

    }

    override fun hideLoading() {

    }





    override fun launchActivity(intent: Intent) {
        ArmsUtils.startActivity(intent)
    }

    override fun killMyself() {
        finish()
    }
    private fun setupPages() {
        llTabHome.setOnClickListener(this)
        llTabStudyCircle.setOnClickListener(this)
        llTabMine.setOnClickListener(this)
        llTabTest.setOnClickListener(this)
        onTabSelected(0)
    }


    override fun requestVersionInfoSuccess(data: VersionBean?) {
        data?.let {
            llTabStudyCircle.visible(it.isOpenShare == 1)
            SharedPreferencesUtil.setIsShowButton(this, it.isShowButton)
            SharedPreferencesUtil.setIsShowFolder(this, it.isShowFolder)


            if (BuildConfig.VERSION_CODE < it.versionCode  &&
                    it.path.startsWith("https://")) {

                // ui配置
                val uiConfig = UiConfig().apply {
                    uiType = UiType.PLENTIFUL
                    cancelBtnText = "下次再说"
//                    updateLogoImgRes = R.mipmap.ic_launcher
//                    updateBtnBgRes = R.mipmap.ic_launcher
//                    titleTextColor = Color.BLACK
//                    titleTextSize = 18f
//                    contentTextColor = Color.parseColor("#88e16531")
                }

                // 更新配置
                val updateConfig = UpdateConfig().apply {
                    force = it.isMust == 1
                    checkWifi = true
//                    needCheckMd5 = true
                    isShowNotification = true
                    alwaysShowDownLoadDialog = true

                    notifyImgRes = R.mipmap.ic_launcher
//                    apkSavePath = Environment.getExternalStorageDirectory().absolutePath +"/teprinciple"
//                    apkSaveName = "teprinciple"
                }
                UpdateAppUtils
                    .getInstance()
                    .apkUrl(it.path)
                    .updateTitle("发现新版本${it.versionName}")
                    .updateContent(it.remark)
                    .updateConfig(updateConfig)
//                    .uiConfig(uiConfig)
                    .update()
            }
        }
    }

    override fun showMessage(message: String) {
       ArmsUtils.snackbarText(message)
    }

    override fun onClick(v: View) {
        when (v.id) {
            R.id.llTabHome -> {
                ivTabHome.setImageResource(R.mipmap.tab_home_selected)
                ivTabStudyCircle.setImageResource(R.mipmap.tab_study_circle_defalut)
                ivTabMine.setImageResource(R.mipmap.tab_mine_default)
                ivTabTest.setImageResource(R.mipmap.tab_test_default)
                tvTabHome.setTextColor(resources.getColor(R.color.blue_500))
                tvTabStudyCircle.setTextColor(resources.getColor(R.color.color_686868))
                tvTabMine.setTextColor(resources.getColor(R.color.color_686868))
                tvTabTest.setTextColor(resources.getColor(R.color.color_686868))
                onTabSelected(0)
            }
            R.id.llTabStudyCircle -> {
                ivTabHome.setImageResource(R.mipmap.tab_home_default)
                ivTabStudyCircle.setImageResource(R.mipmap.tab_study_circle_selected)
                ivTabMine.setImageResource(R.mipmap.tab_mine_default)
                ivTabTest.setImageResource(R.mipmap.tab_test_default)
                tvTabHome.setTextColor(resources.getColor(R.color.color_686868))
                tvTabStudyCircle.setTextColor(resources.getColor(R.color.blue_500))
                tvTabMine.setTextColor(resources.getColor(R.color.color_686868))
                tvTabTest.setTextColor(resources.getColor(R.color.color_686868))
                onTabSelected(1)
            }
            R.id.llTabMine -> {
                ivTabHome.setImageResource(R.mipmap.tab_home_default)
                ivTabStudyCircle.setImageResource(R.mipmap.tab_study_circle_defalut)
                ivTabMine.setImageResource(R.mipmap.tab_mine_selected)
                ivTabTest.setImageResource(R.mipmap.tab_test_default)
                tvTabHome.setTextColor(resources.getColor(R.color.color_686868))
                tvTabStudyCircle.setTextColor(resources.getColor(R.color.color_686868))
                tvTabMine.setTextColor(resources.getColor(R.color.blue_500))
                tvTabTest.setTextColor(resources.getColor(R.color.color_686868))
                onTabSelected(2)
            }
            R.id.llTabTest -> {
                ivTabHome.setImageResource(R.mipmap.tab_home_default)
                ivTabStudyCircle.setImageResource(R.mipmap.tab_study_circle_defalut)
                ivTabMine.setImageResource(R.mipmap.tab_mine_default)
                ivTabTest.setImageResource(R.mipmap.tab_test_selected)
                tvTabHome.setTextColor(resources.getColor(R.color.color_686868))
                tvTabStudyCircle.setTextColor(resources.getColor(R.color.color_686868))
                tvTabMine.setTextColor(resources.getColor(R.color.color_686868))
                tvTabTest.setTextColor(resources.getColor(R.color.blue_500))
                onTabSelected(3)
            }
        }
    }


    private fun onTabSelected(position: Int) {
        when (position) {
            0 -> {
                switchFragment(mHomeFragment)
            }
            1 -> {
                switchFragment(mStudyCircleFragment)
            }
            2 -> {
                switchFragment(mMineFragment)
            }
            3->{
                switchFragment(mTestFragment)
            }
            else -> {
            }
        }
    }

    /**
     * fragment 切换
     */
   private fun switchFragment(to: Fragment){
        val fragmentManager = supportFragmentManager
        val transaction = fragmentManager.beginTransaction()
        Preconditions.checkNotNull(to)
        if (to !== mCurrentFragment) {
            if (mCurrentFragment == null) {
                transaction.add(R.id.flContainer, to).commit()
            } else if (!to.isAdded) {
                transaction.hide(mCurrentFragment!!).add(R.id.flContainer, to).commit()
            } else {
                transaction.hide(mCurrentFragment!!).show(to).commit()
            }
            mCurrentFragment = to
        }
    }

    var lastEndTime = 0L
    override fun onBackPressed() {
        val curTime = System.currentTimeMillis()
        val intervalTime = curTime - lastEndTime
        lastEndTime = curTime
        if (intervalTime < 2000) {
            super.onBackPressed()
        }else{
            ArmsUtils.makeText(applicationContext,"再按一次退出")
        }
    }




}