package com.daomingedu.onecp.mvp.ui.activity

import android.Manifest
import android.app.ProgressDialog
import android.content.Intent
import android.graphics.Bitmap
import android.os.Bundle
import android.os.Handler
import android.os.Message
import android.util.Base64
import android.util.Log
import android.view.View
import androidx.appcompat.app.AlertDialog
import com.bumptech.glide.Glide
import com.bumptech.glide.load.DataSource
import com.bumptech.glide.load.engine.GlideException
import com.bumptech.glide.request.RequestListener
import com.bumptech.glide.request.RequestOptions
import com.bumptech.glide.request.target.Target
import com.daomingedu.onecp.R
import com.daomingedu.onecp.app.Constant
import com.daomingedu.onecp.app.Preference
import com.daomingedu.onecp.app.onClick
import com.daomingedu.onecp.di.component.DaggerUpdateVideoComponent
import com.daomingedu.onecp.di.module.UpdateVideoModule
import com.daomingedu.onecp.mvp.contract.UpdateVideoContract
import com.daomingedu.onecp.mvp.model.entity.CompareFaceScoreBean
import com.daomingedu.onecp.mvp.model.entity.LocalWork
import com.daomingedu.onecp.mvp.model.entity.UploadVideoParamBean
import com.daomingedu.onecp.mvp.presenter.UpdateVideoPresenter
import com.daomingedu.onecp.util.MediaController
import com.daomingedu.onecp.util.MemoryUtil
import com.daomingedu.onecp.util.MySessionCredentialProvider
import com.daomingedu.onecp.util.SharedPreferencesUtil
import com.google.gson.Gson
import com.jess.arms.base.BaseActivity
import com.jess.arms.di.component.AppComponent
import com.jess.arms.utils.ArmsUtils
import com.jmolsmobile.landscapevideocapture.VideoCaptureActivity
import com.jmolsmobile.landscapevideocapture.configuration.CaptureConfiguration
import com.jmolsmobile.landscapevideocapture.configuration.PredefinedCaptureConfigurations
import com.pili.pldroid.player.PLOnCompletionListener
import com.pili.pldroid.player.PLOnErrorListener
import com.tbruyelle.rxpermissions2.RxPermissions
import com.tencent.cos.xml.CosXmlServiceConfig
import com.tencent.cos.xml.CosXmlSimpleService
import com.tencent.cos.xml.exception.CosXmlClientException
import com.tencent.cos.xml.exception.CosXmlServiceException
import com.tencent.cos.xml.listener.CosXmlProgressListener
import com.tencent.cos.xml.listener.CosXmlResultListener
import com.tencent.cos.xml.model.CosXmlRequest
import com.tencent.cos.xml.model.CosXmlResult
import com.tencent.cos.xml.transfer.TransferConfig
import com.tencent.cos.xml.transfer.TransferManager
import com.vincent.videocompressor.VideoCompress
import kotlinx.android.synthetic.main.activity_update_video.*
import kotlinx.android.synthetic.main.activity_update_video.PLVideoTextureView
import kotlinx.android.synthetic.main.activity_upload_video_list.*
import kotlinx.android.synthetic.main.activity_upload_video_play.*
import net.alhazmy13.mediapicker.Video.VideoPicker
import timber.log.Timber
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

/**
 * Created by jianhongxu on 3/18/21
 * Description
 */
class UpdateVideoAct : BaseActivity<UpdateVideoPresenter>(), UpdateVideoContract.View {

    private var videoTime by Preference(Constant.VIDEO_TIME, 0)
    private var videoPixel by Preference(Constant.VIDEO_PIXEL, 0)

    lateinit var testSignId: String

    //上传的文件
    var selectVideoFile: File? = null

    lateinit var compareFaceScoreBean: CompareFaceScoreBean

    var uploadVideoParamBean: UploadVideoParamBean? = null

    override fun requestCompareFaceScoreSuccess(bean: CompareFaceScoreBean) {
        compareFaceScoreBean = bean
        tvScore.text = bean.text
    }

    override fun requestUploadVideoParam(bean: UploadVideoParamBean) {
        uploadVideoParamBean = bean
    }

    override fun requestSaveUploadVideo() {
        AlertDialog.Builder(this).setTitle("上传成功")
            .setPositiveButton("是") { _, _ -> finish() }
            .show()
    }

    override fun setupActivityComponent(appComponent: AppComponent) {
        DaggerUpdateVideoComponent
            .builder()
            .appComponent(appComponent)
            .updateVideoModule(UpdateVideoModule(this))
            .build()
            .inject(this)
    }

    override fun initView(savedInstanceState: Bundle?): Int {
        return R.layout.activity_update_video
    }

    override fun initData(savedInstanceState: Bundle?) {
        testSignId = intent.getStringExtra(Constant.ENROLL_ID_EXTRA)

        title = "上传视频"

        btnLocalFile.onClick { //选择本地文件
            VideoPicker.Builder(this)
                .mode(VideoPicker.Mode.GALLERY)
                .directory(VideoPicker.Directory.DEFAULT)
                .extension(VideoPicker.Extension.MP4)
                .enableDebuggingMode(true)
                .build()
        }

        ivClose.onClick { //删除已选择的视频文件
            if (selectVideoFile != null && selectVideoFile!!.exists())
                selectVideoFile?.delete()
            else
                selectVideoFile = null
            rlVideo.visibility = View.GONE
            tvScore.text =""
        }

        btnUpdate.onClick {
            if (selectVideoFile == null||!selectVideoFile!!.exists()) {
                showMessage("选择视频或拍摄视频")
                return@onClick
            }
            if (compareFaceScoreBean.isUpload == 0) {
                showMessage("人脸识别未通过")
                return@onClick
            }

            if (uploadVideoParamBean == null) {
                Timber.e("腾讯云所需数据为null")
                return@onClick
            }

            updateCoS(selectVideoFile!!, uploadVideoParamBean!!)

        }

        btnTakeCamera.onClick {//拍摄视频
            RxPermissions(this).request(
                Manifest.permission.RECORD_AUDIO,
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE,
                Manifest.permission.CAMERA
            )
                .subscribe {
                    if (it) {
                        when (MemoryUtil.memoryIsAvailble(this)) {
                            MemoryUtil.MEMORY_OK -> takeVideo("")
                            MemoryUtil.MEMORY_OUT -> {
                                val dialog = AlertDialog.Builder(this)
                                dialog.setMessage("存储空间过小, 可能会出现录制完了无法保存视频的情况, 是否继续拍摄视频")
                                dialog.setCancelable(false)
                                dialog.setPositiveButton("继续") { dialog, which ->
                                    dialog?.dismiss()
                                    takeVideo("")
                                }
                                dialog.setNegativeButton("取消") { dialog, which -> dialog?.dismiss() }
                                dialog.create().show()
                            }

                        }
                    } else {
                        showMessage("请开启相关权限")
                    }
                }
        }

        mPresenter?.getUploadVideoParam(testSignId)
        PLVideoTextureView.setMediaController(MediaController(this))


    }

    /**
     * 上传腾讯云
     */
    fun updateCoS(file: File, bean: UploadVideoParamBean) {

        val credentials = bean.cosTempKey.credentials
        val mySessionCredentialProvider = MySessionCredentialProvider(
            credentials.tmpSecretId,
            credentials.tmpSecretKey,
            credentials.sessionToken,
            bean.cosTempKey.startTime.toLong(),
            bean.cosTempKey.expiredTime.toLong()
        )
        val serviceConfig = CosXmlServiceConfig.Builder()
            .setRegion(bean.region)
            .builder()
        val cosXmlService = CosXmlSimpleService(this, serviceConfig, mySessionCredentialProvider)
        val transferConfig = TransferConfig.Builder().build()
        val transferManager = TransferManager(
            cosXmlService,
            transferConfig
        )

        val bucket = bean.bucketName  //存储桶，格式：BucketName-APPID
        val cosPath = "/${bean.uploadKey}mp4" //对象在存储桶中的位置标识符，即称对象键
        val srcPath = file.absolutePath
        val uploadId: String? = null

        progressDialog = ProgressDialog(this)
        progressDialog?.setCancelable(false)
        progressDialog?.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL)
        progressDialog?.setMessage("视频上传中")
        progressDialog?.show()
        // 上传文件
        val cosxmlUploadTask = transferManager.upload(
            bucket, cosPath,
            srcPath, uploadId
        )
        cosxmlUploadTask.setCosXmlProgressListener(object : CosXmlProgressListener {
            override fun onProgress(complete: Long, target: Long) {
                Log.d("test", "onProgress")
                Log.d("test", complete.toString())
                Log.d("test", target.toString())
                progressDialog?.max = 100
                progressDialog?.progress =
                    (((complete.toDouble() / target.toDouble()) * 100).toInt())
            }
        })
        cosxmlUploadTask.setCosXmlResultListener(object : CosXmlResultListener {
            override fun onSuccess(request: CosXmlRequest?, result: CosXmlResult?) {
                Log.d("test", "onSuccess")
                Log.d("test", Gson().toJson(result))
                progressDialog?.dismiss()
                //isUpToTencent = true
                //腾讯云上传成功后
                mPresenter?.saveUploadVideo(
                    testSignId,
                    "${uploadVideoParamBean!!.uploadKey}mp4",
                    selectVideoFile?.length().toString(),
                    compareFaceScoreBean.isAudit
                )
//                handler.sendEmptyMessage(1)
            }

            override fun onFail(
                request: CosXmlRequest?,
                exception: CosXmlClientException?,
                serviceException: CosXmlServiceException?
            ) {
                Log.d("test", "onFail")
                Log.d("test", exception?.errorCode.toString())
                Log.d("test", serviceException?.message)
                progressDialog?.dismiss()
            }

        })
    }

    /**
     * 打开摄像头录像
     */
    private fun takeVideo(fileName: String) {
        val config = createCaptureConfiguration()
        val intent = Intent(this, VideoCaptureActivity::class.java)
        intent.putExtra(VideoCaptureActivity.EXTRA_CAPTURE_CONFIGURATION, config)
        intent.putExtra(VideoCaptureActivity.EXTRA_OUTPUT_FILENAME, fileName) //文件名称

//        intent.putExtra(VideoCaptureActivity.WATER, SharedPreferencesUtil.getWater(this))
        intent.putExtra(VideoCaptureActivity.WATER, 0)//视频水印
        intent.putExtra("videoType", 1)
        startActivityForResult(intent, LocalWork.VIDEO)
    }

    /**
     * 录制视频配置
     */
    private fun createCaptureConfiguration(): CaptureConfiguration {
        //分辨率
        val resolution = when (videoPixel) {
            1 -> PredefinedCaptureConfigurations.CaptureResolution.RES_480P
            2 -> PredefinedCaptureConfigurations.CaptureResolution.RES_720P
            3 -> PredefinedCaptureConfigurations.CaptureResolution.RES_1080P
            else -> PredefinedCaptureConfigurations.CaptureResolution.RES_480P
        }
        //质量
        val quality = PredefinedCaptureConfigurations.CaptureQuality.LOW //低质量
        //限制时长
        //val fileDuration = videoTime * 60 //10分钟
        val fileDuration = videoTime
        //限制大小
        val filesize = CaptureConfiguration.NO_FILESIZE_LIMIT //不限
        //true显示录制视频时的时间，false为不显示
        val builder =
            CaptureConfiguration.Builder(resolution, quality)
        builder.maxDuration(fileDuration)
//        builder.maxFileSize(((application as MyApp).getVideo() / 1024 / 1024) as Int)
        builder.frameRate(PredefinedCaptureConfigurations.FPS_30)
        builder.noCameraToggle()
        builder.showRecordingTime()
        return builder.build()
    }


    override fun showMessage(message: String) {
        ArmsUtils.snackbarText(message)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode != RESULT_OK) return
        when (requestCode) {
            VideoPicker.VIDEO_PICKER_REQUEST_CODE -> {
                val list = data?.getStringArrayListExtra(VideoPicker.EXTRA_VIDEO_PATH)!!
                finishCompleted(list[0])
                Timber.e("获得路径：   " + list.toString())


            }
            LocalWork.VIDEO -> {
                val videoPath = data!!.getStringExtra(VideoCaptureActivity.EXTRA_OUTPUT_FILENAME)
                if (selectVideoFile != null && selectVideoFile!!.exists()) {
                    selectVideoFile?.delete()
                }
                selectVideoFile = File(videoPath)
                Timber.e("获得路径：   " + selectVideoFile?.absolutePath)
                initVideoPlay(selectVideoFile!!.absolutePath)
            }

        }
    }

    var progressDialog: ProgressDialog? = null
    private fun finishCompleted(path: String) {
        progressDialog = ProgressDialog(this)
        progressDialog?.setCancelable(false)
        progressDialog?.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL)
        progressDialog?.setMessage("视频压缩中")
        progressDialog?.show()
        /*AlertDialog.Builder builder = new AlertDialog.Builder(VideoCaptureActivity.this);
            builder.setCancelable(false);
            builder.setMessage("视频生成中...");
            alertDialog = builder.create();
            alertDialog.show();*/
        //压缩文件名
        if (selectVideoFile?.exists() == true) selectVideoFile?.delete()
        selectVideoFile = File(
            (getExternalFilesDir("Movies")?.absolutePath ?: "") + File.separator + "VID_" + getTime(
                System.currentTimeMillis()
            ) + ".mp4"
        )
        VideoCompress.compressVideoMedium(
            path, selectVideoFile?.absolutePath,
            object : VideoCompress.CompressListener {
                override fun onSuccess() {
                    Log.d("test", "onSuccess")
                    progressDialog?.dismiss()
                    handler.sendEmptyMessage(0)
                }

                override fun onFail() {
                    Log.d("test", "onFail")
                    progressDialog?.dismiss()
                }

                override fun onProgress(percent: Float) {
                    progressDialog?.max = 100
                    progressDialog?.progress = percent.toInt()
                }

                override fun onStart() {
                }

            })
    }

    private fun getTime(date_temp: Long): String? {
        //时间格式,HH是24小时制，hh是AM PM12小时制
        val sdf = SimpleDateFormat("yyyy-MM-dd_HH_mm")
        //比如timestamp=1449210225945；
        val date_string = sdf.format(Date(date_temp))
        //至于取10位或取13位，date_temp*1000L就是这种截取作用。如果是和服务器传值的，就和后台商量好就可以了
        Log.d("test", date_string)
        return date_string
    }

    val handler = object : Handler() {
        override fun handleMessage(msg: Message) {
            super.handleMessage(msg)
            if (msg.what == 0) {
                if (selectVideoFile != null || selectVideoFile?.exists() == true) {
                    Timber.e(selectVideoFile?.absolutePath)
                    initVideoPlay(selectVideoFile!!.absolutePath)
                }
            }
        }
    }


    /**
     * 初始化视频播放
     */
    private fun initVideoPlay(videoPath: String) {

        loadVideoScreenshot(videoPath)
        rlVideo.visibility = View.VISIBLE

        PLVideoTextureView.setMediaController(MediaController(this))
        PLVideoTextureView.setVideoPath(videoPath)
        PLVideoTextureView.start()
        PLVideoTextureView.setOnErrorListener(object : PLOnErrorListener {
            override fun onError(p0: Int): Boolean {
                return false
            }
        })
        PLVideoTextureView.setOnCompletionListener(object : PLOnCompletionListener {
            override fun onCompletion() {
            }
        })
    }
    override fun onDestroy() {
        super.onDestroy()
//        PLVideoTextureView.stopPlayback()
    }

    /**
     * 获取视频截屏
     */
    fun loadVideoScreenshot(videoUrl: String) {
        Glide.with(this)
            .setDefaultRequestOptions(
                RequestOptions()
                    .frame(3000000L)
            ).asBitmap()
            .load(videoUrl).addListener(object : RequestListener<Bitmap> {
                override fun onLoadFailed(
                    e: GlideException?,
                    model: Any?,
                    target: Target<Bitmap>?,
                    isFirstResource: Boolean
                ): Boolean {

                    return false
                }

                override fun onResourceReady(
                    resource: Bitmap?,
                    model: Any?,
                    target: Target<Bitmap>?,
                    dataSource: DataSource?,
                    isFirstResource: Boolean
                ): Boolean {
//                    ivVideo.setImageBitmap(resource)
                    val base64 = bitmapToBase64(resource!!)
                    mPresenter?.getCompareFaceScore(testSignId, base64)
                    return false
                }

            }).submit()
//            .into(ivVideo)

    }

    fun bitmapToBase64(bitmap: Bitmap): String {
        var result = ""
        var baos: ByteArrayOutputStream? = null
        try {
            if (bitmap != null) {
                baos = ByteArrayOutputStream()
                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos)
                baos.flush()
                baos.close()
                val bitmapBytes: ByteArray = baos.toByteArray()
                result = Base64.encodeToString(bitmapBytes, Base64.DEFAULT)
            }
        } catch (e: IOException) {
            e.printStackTrace()
        } finally {
            try {
                if (baos != null) {
                    baos.flush()
                    baos.close()
                }
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
        return result
    }



}